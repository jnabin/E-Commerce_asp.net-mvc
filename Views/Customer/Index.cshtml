@model E_Commerce.Models.Customer

@{
    ViewBag.Title = "Index";
    Session["existUser"] = Model.Username;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="~/Scripts/jquery-1.12.4.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<hr />
<div class="container">
    <div class="row">
        <div class="col-2 border-right border-dark">
            <h3>My Account</h3>
            <ul class="list-unstyled">
                <li><a href="#">Customer Info</a></li>
                <li><a class="text-secondary" href="#">Addresses</a></li>
                <li><a class="text-secondary" href="#">Orders</a></li>
                <li><a class="text-secondary" href="#">Change Password</a></li>
                <li><a class="text-secondary" href="#">My Product Reviews</a></li>
            </ul>
        </div>
        <div class="col-10">
            <div class="container text-center">
                <h3 class="text-secondary">My Account - Customer Info</h3>
                <br />
                <h3>YOUR PERSONAL DETAILS</h3>
            </div>
            <hr />
            <div class="container">
                <div class="row">
                    <div class="col-3 text-center">
                        <form method="post" action="/Customer/updateImage" enctype="multipart/form-data" id="ajaxform">
                            @Html.HiddenFor(model => model.CustomerID)
                            @Html.HiddenFor(model => model.CustomerName)
                            @Html.HiddenFor(model => model.Email)
                            @Html.HiddenFor(model => model.Gender)
                            @Html.HiddenFor(model => model.password)
                            @Html.HiddenFor(model => model.Username)
                            @Html.HiddenFor(model => model.CustomerID)
                            @Html.HiddenFor(model => model.Address)
                            @Html.HiddenFor(model => model.City)
                            @Html.HiddenFor(model => model.ZipCode)
                            @Html.HiddenFor(model => model.PhoneNumber)
                            @Html.HiddenFor(model => model.usertype)

                            <div class="profile-pic-div">
                                <img src="~/Content/image/@Model.ImageFile" alt="profile pic" id="photo">
                                <input type="file" id="file" name="file">
                                <label for="file" id="uploadBtn">Choose Photo</label>
                            </div>
                        </form>
                    </div>
                    <div class="col-9">

                        @using (Html.BeginForm("UpdateInfo", "Customer", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()

                            <div class="form-horizontal">


                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.CustomerID)

                                <div class="form-group">
                                    @Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.Address)

                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.City)

                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.ZipCode)

                                <div class="form-group">
                                    @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.RadioButtonFor(model => model.Gender, "Male", new { htmlAttributes = new { @class = "form-control" } }) @Html.Label("Male")
                                        @Html.RadioButtonFor(model => model.Gender, "Female", new { htmlAttributes = new { @class = "form-control" } }) @Html.Label("Female")
                                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })

                                        @if (TempData["error"] != null)
                                        {
                                            <label style="color:red">@TempData["error"]</label>
                                        }
                                    </div>
                                </div>

                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.ImageFile)

                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.password)

                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.usertype)

                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">
                                        <input type="submit" value="Save" class="btn btn-default" />
                                    </div>
                                </div>
                            </div>
                        }

                    </div>
                </div>
            </div>

        </div>

    </div>
</div>

<script>

    //declearing html elements

    const imgDiv = document.querySelector('.profile-pic-div');
    const img = document.querySelector('#photo');
    const file = document.querySelector('#file');
    const uploadBtn = document.querySelector('#uploadBtn');

    //if user hover on img div

    imgDiv.addEventListener('mouseenter', function () {
        uploadBtn.style.display = "block";
    });

    //if we hover out from img div

    imgDiv.addEventListener('mouseleave', function () {
        uploadBtn.style.display = "none";
    });

    $(document).ready(function () {
        $("#file").change(function (e) {
            const choosedFile = this.files[0];

            if (choosedFile) {

                const reader = new FileReader(); //FileReader is a predefined function of JS

                reader.addEventListener('load', function () {
                    img.setAttribute('src', reader.result);
                });

                reader.readAsDataURL(choosedFile);


            }

            var formdata = new FormData($('form').get(0));
            CallService(formdata);

            function CallService(file) {
                $.ajax({
                    url: '@Url.Action("updateImage", "Customer")',
                    type: 'POST',
                    data: file,
                    cache: false,
                    processData: false,
                    contentType: false,
                    success: function (color) {
                        ;
                    },
                    error: function () {
                        alert('Error occured');
                    }
                });
            }
        });
    });
</script>
